import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import {
  ListToolsRequestSchema,
  CallToolRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";
import { createServices } from "./index.js";
import { JwtUtility } from "../utils/jwtUtility.js";
import { IProduct } from "../models/Product.js";

export class McpToolsHandler {
  constructor(
    private server: Server,
    private services: ReturnType<typeof createServices>
  ) {}

  registerAll(): void {
    this.registerListHandler();
    this.registerCallHandler();
  }

  private createErrorResponse(message: string) {
    return {
      content: [
        {
          type: "text" as const,
          text: JSON.stringify({ success: false, error: message }, null, 2),
        },
      ],
      isError: true,
    };
  }

  private createSuccessResponse(data: any) {
    return {
      content: [
        {
          type: "text" as const,
          text: JSON.stringify({ success: true, data }, null, 2),
        },
      ],
    };
  }

  private verifyAccessToken(accessToken: string): number | null {
    try {
      const decoded = JwtUtility.verifyToken(accessToken);
      return decoded.id;
    } catch {
      return null;
    }
  }

  private async parseAIResponse(response: string): Promise<any> {
    const cleaned = response
      .replace(/```json\n?/g, "")
      .replace(/```\n?/g, "")
      .trim();
    return JSON.parse(cleaned);
  }

  private async analyzeProductQuery(question: string) {
    const prompt = `Ph√¢n t√≠ch c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v√† x√°c ƒë·ªãnh xem h·ªç c√≥ ƒëang mu·ªën t√¨m ki·∫øm ho·∫∑c mua s·∫£n ph·∫©m kh√¥ng.
C√¢u h·ªèi: "${question}"

Ph·∫£n h·ªìi b·∫±ng m·ªôt ƒë·ªëi t∆∞·ª£ng JSON v·ªõi ƒë·ªãnh d·∫°ng ch√≠nh x√°c sau:
{
  "isProductQuery": true/false,
  "keywords": ["t·ª´ kh√≥a 1", "t·ª´ kh√≥a 2", ...],
  "intent": "search" ho·∫∑c "buy" ho·∫∑c "other"
}`;

    const response = await this.services.aiAgent.ask(
      "gemini-2.0-flash",
      prompt
    );
    return this.parseAIResponse(response);
  }

  private async matchProductsByKeywords(
    keywords: string[],
    products: IProduct[]
  ) {
    const productList = products.map((p) => ({ id: p.id, name: p.name }));

    const prompt = `D·ª±a tr√™n c√°c t·ª´ kh√≥a sau, h√£y t√¨m c√°c s·∫£n ph·∫©m li√™n quan trong danh s√°ch.
T·ª´ kh√≥a: ${JSON.stringify(keywords)}
Danh s√°ch s·∫£n ph·∫©m (id, name): ${JSON.stringify(productList)}

Ch·ªâ tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON c√°c ID s·∫£n ph·∫©m ƒë∆∞·ª£c s·∫Øp x·∫øp theo m·ª©c ƒë·ªô li√™n quan.
ƒê·ªãnh d·∫°ng: [id1, id2, id3, ...]
N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ: []`;

    const response = await this.services.aiAgent.ask(
      "gemini-2.0-flash",
      prompt
    );
    const matchedIds = await this.parseAIResponse(response);

    return matchedIds
      .map((id: number) => products.find((p) => p.id === id))
      .filter((p: any) => p !== undefined);
  }

  private async extractOrderItems(question: string, allProducts: IProduct[]) {
    const prompt = `Ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† x√°c ƒë·ªãnh h·ªç c√≥ mu·ªën MUA/ƒê·∫∂T H√ÄNG s·∫£n ph·∫©m kh√¥ng.

Y√äU C·∫¶U: "${question}"

S·∫£n ph·∫©m c√≥ s·∫µn:
${JSON.stringify(
  allProducts.map((p) => ({
    id: p.id,
    name: p.name,
    price: p.price,
    quantity: p.quantity,
  }))
)}

QUAN TR·ªåNG:
- N·∫øu c√≥ t·ª´ "mua", "ƒë·∫∑t", "order", "ƒë·∫∑t h√†ng" ‚Üí isBuyIntent = true
- N·∫øu ch·ªâ h·ªèi, t√¨m ki·∫øm ‚Üí isBuyIntent = false
- S·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 1 n·∫øu kh√¥ng n√≥i r√µ
- Ch·ªâ ch·ªçn s·∫£n ph·∫©m c√≥ trong danh s√°ch

Ph·∫£n h·ªìi JSON ch√≠nh x√°c:
{
  "isBuyIntent": true/false,
  "items": [{"id": 1, "name": "T√™n s·∫£n ph·∫©m", "quantity": 2}]
}

V√≠ d·ª•:
- "T√¥i mu·ªën mua laptop" ‚Üí {"isBuyIntent": true, "items": [{"id": 1, "name": "Laptop", "quantity": 1}]}
- "C√≥ laptop n√†o kh√¥ng?" ‚Üí {"isBuyIntent": false, "items": []}`;

    const response = await this.services.aiAgent.ask(
      "gemini-2.0-flash",
      prompt
    );
    return this.parseAIResponse(response);
  }

  private async validateOrderItems(items: any[]) {
    const validatedItems = [];

    for (const item of items) {
      const product = (await this.services.productService.getProductById(
        item.id
      )) as IProduct;

      if (!product) {
        throw new Error(
          `S·∫£n ph·∫©m "${item.name}" (ID: ${item.id}) kh√¥ng t√¨m th·∫•y.`
        );
      }

      if (product.quantity < item.quantity) {
        throw new Error(
          `S·ªë l∆∞·ª£ng kh√¥ng ƒë·ªß cho "${product.name}". S·∫µn c√≥: ${product.quantity}, Y√™u c·∫ßu: ${item.quantity}`
        );
      }

      validatedItems.push({ productId: product.id, quantity: item.quantity });
    }

    return validatedItems;
  }

  private registerListHandler(): void {
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: [
          {
            name: "search_products",
            description:
              "T√¨m ki·∫øm s·∫£n ph·∫©m d·ª±a tr√™n c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng. Y√™u c·∫ßu ƒëƒÉng nh·∫≠p.",
            inputSchema: {
              type: "object",
              properties: {
                question: {
                  type: "string",
                  description: "C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng v·ªÅ s·∫£n ph·∫©m",
                },
              },
              required: ["question"],
            },
          },
          {
            name: "create_order",
            description:
              "T·∫°o ƒë∆°n h√†ng d·ª±a tr√™n y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng. Y√™u c·∫ßu ƒëƒÉng nh·∫≠p.",
            inputSchema: {
              type: "object",
              properties: {
                accessToken: {
                  type: "string",
                  description: "Access token c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p",
                },
                question: {
                  type: "string",
                  description: "Y√™u c·∫ßu mua s·∫£n ph·∫©m",
                },
                name: {
                  type: "string",
                  description: "T√™n ng∆∞·ªùi mua",
                },
                phone: {
                  type: "string",
                  description: "S·ªë ƒëi·ªán tho·∫°i",
                },
                address: {
                  type: "string",
                  description: "ƒê·ªãa ch·ªâ giao h√†ng",
                },
              },
              required: ["question"],
            },
          },
        ],
      };
    });
  }

  private registerCallHandler(): void {
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      try {
        switch (name) {
          case "search_products":
            return await this.handleSearchProducts(args);

          case "create_order":
            return await this.handleCreateOrder(args);

          default:
            return this.createErrorResponse(`Unknown tool: ${name}`);
        }
      } catch (error: any) {
        return this.createErrorResponse(
          error.message || "Tool execution failed"
        );
      }
    });
  }

  private async handleSearchProducts(args: any) {
    const { question } = args as { question: string };

    const analysis = await this.analyzeProductQuery(question);

    if (!analysis.isProductQuery) {
      return this.createSuccessResponse({
        message: "C√¢u h·ªèi n√†y kh√¥ng c√≥ v·∫ª nh∆∞ ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m.",
        intent: analysis.intent,
      });
    }

    const allProducts = await this.services.productService.getProducts();
    if (allProducts.length === 0) {
      return this.createSuccessResponse({
        message: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong c∆° s·ªü d·ªØ li·ªáu.",
        products: [],
      });
    }

    const matchedProducts = await this.matchProductsByKeywords(
      analysis.keywords,
      allProducts
    );

    return this.createSuccessResponse({
      message: `T√¨m th·∫•y ${matchedProducts.length} s·∫£n ph·∫©m ph√π h·ª£p.`,
      intent: analysis.intent,
      keywords: analysis.keywords,
      products: matchedProducts,
    });
  }

  private async handleCreateOrder(args: any) {
    const { accessToken, question, name, phone, address } = args as {
      accessToken?: string;
      question: string;
      name?: string;
      phone?: string;
      address?: string;
    };

    const userId = accessToken ? this.verifyAccessToken(accessToken) : null;

    const allProducts = await this.services.productService.getProducts();
    if (allProducts.length === 0) {
      return this.createErrorResponse("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o.");
    }

    const extraction = await this.extractOrderItems(question, allProducts);

    if (!extraction.isBuyIntent || extraction.items.length === 0) {
      return this.createSuccessResponse({
        message: "Y√™u c·∫ßu kh√¥ng c√≥ v·∫ª nh∆∞ ƒëang mu·ªën mua s·∫£n ph·∫©m.",
        availableProducts: allProducts.slice(0, 5),
      });
    }

    if (!userId && (!name || !phone || !address)) {
      const missingFields = [];
      if (!name) missingFields.push("name");
      if (!phone) missingFields.push("phone");
      if (!address) missingFields.push("address");

      return this.createSuccessResponse({
        message:
          "üîê B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. ƒê·ªÉ t·∫°o ƒë∆°n h√†ng, b·∫°n c√≥ 2 l·ª±a ch·ªçn:\n" +
          "1Ô∏è‚É£ ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n\n" +
          "2Ô∏è‚É£ Cung c·∫•p th√¥ng tin sau ƒë·ªÉ t·∫°o ƒë∆°n h√†ng nhanh",
        requiredFields: missingFields,
        items: extraction.items,
        nextStep: "provide_info",
        example: {
          name: "ƒê√¨nh Ph√∫c",
          phone: "0339592404",
          address: "Hu·∫ø",
        },
      });
    }

    const validatedItems = await this.validateOrderItems(extraction.items);

    const order = await this.services.orderService.createOrder(
      userId,
      validatedItems,
      userId
        ? undefined
        : {
            name: name as string,
            phone: phone as string,
            address: address as string,
          }
    );

    console.log("Created order:", order);

    return this.createSuccessResponse({
      message: "‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!",
      data: order,
    });
  }
}
